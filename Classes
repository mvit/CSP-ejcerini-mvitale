import math

class Bag:
    name = 'a'                         #The name of the bag
    max_capacity = 0                   #The weight limit of the bag
    current_weight = 0                 #The current weight of the bag
    items = []                         #The items that are in the bag
    minimum_items = 0                  #The minimum number of items in the bag
    maximum_items = 0                  #The maximum number of items in the bag

    def _init_(self, name, max_capacity):
        self.name = name
        self.max_capacity = max_capacity

    def addToBag(self, item):
        if item.weight + current_weight > max_capacity:
            return -1

        if len(items) > maximum_items:
            return -1

        if item.addValid(self):
            self.items.add(item)
            self.current_weight += item.weight
        else:
            return -1

        return 0

    def getPercentFull(self):
        return math.round(self.current_weight/self.max_capacity)


class Item:
    name = 'A'                         #The Name of the Item
    weight = 0                         #How much it weighs
    unary_inclusive = []               #The list of bags that the Item is ALLOWED in
    unary_exclusive = []               #The list of bags that the Item is NOT ALLOWED in
    equality = []                      #Items that this object MUST BE IN THE SAME BAG AS
    inequality = []                    #Items that this object MUST NOT BE IN THE SAME BAG AS
    mutual_inclusive_items = []        #The Items that this Item is in an Inclusivity Group with
    mutual_inclusive_bags = []         #The bags for this Item's Mutual Inclusivity

    def _init_(self, name, weight):
        self.name = name
        self.weight = weight

    def addUnaryIn(self, bagName):
        self.unary_inclusive.add(bagName)

    def addUnaryEx(self, bagName):
        self.unary_exclusive.add(bagName)

    def addEquality(self, itemName):
        self.equality.add(itemName)

    def addInequality(self, itemName):
        self.inequality.add(itemName)

    def addMutualIncItem(self, itemName):
        self.mutual_inclusive_items.add(itemName)

    def addMutualIncBags(self, bagName):
        self.addMutualIncBags(bagName)

    def addValid(self, bag):

        allowed = True

        if bag.name in self.unary_exclusive :
            allowed = False
            return allowed

        for i in self.inequality:
            if i.name in bag.items:
                allowed = False
                return allowed

        if bag.name in self.mutual_inclusive_bags:
            for i in mutual_inclusive_items:
                if i.name in bag.items:
                    allowed = False
                    return allowed

        return allowed




